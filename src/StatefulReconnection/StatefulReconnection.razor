@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.JSInterop
@using System.Reflection
@inject IJSRuntime JS
@implements IDisposable
@namespace Microsoft.AspNetCore.Components.Web

<div class="reconnect-overlay" @ref="overlay">
    @(ReconnectContent ?? DefaultContent)()
</div>

@code {
    [Parameter]
    public int MaxRetries { get; set; } = 10 * 60; // 10 minutes

    [Parameter]
    public int RetryIntervalMilliseconds { get; set; } = 1000;

    [Parameter]
    public RenderFragment? ReconnectContent { get; set; }

    private RenderFragment DefaultContent => __builder =>
    {
        <div class="default-content">
            <div class="lds-ripple"><div></div><div></div></div>
            <p>Rejoining the server...</p>
            @if (showCheckInternet)
            {
                <p class="check-internet">Check your internet connection</p>
            }
            <button onclick="location.reload()" style="display: none">Reload</button>
        </div>
    };

    private bool showCheckInternet = false;
    private Timer? timer;
    private ElementReference overlay;
    private Task<IJSObjectReference> _moduleLoader = default!;
    private bool _disposed;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_disposed)
        {
            _moduleLoader = JS.InvokeAsync<IJSObjectReference>("import", "./_content/StatefulReconnection/StatefulReconnection.razor.js").AsTask();

            // We don't want to restore the UI until it's finished any loading tasks. There isn't a public API for observing
            // quiescence so we'll bypass the problem with some reflection. If necessary a public API can be added.
            var renderHandle = (RenderHandle)typeof(ComponentBase).GetField("_renderHandle", BindingFlags.Instance | BindingFlags.NonPublic)!.GetValue(this)!;
            var renderer = (Renderer)typeof(RenderHandle).GetField("_renderer", BindingFlags.Instance | BindingFlags.NonPublic)!.GetValue(renderHandle)!;
            var waitForQuiescenceMethod = typeof(Renderer).GetMethod("WaitForQuiescence", BindingFlags.Instance | BindingFlags.NonPublic)!;
            var quiescenceTask = (Task)waitForQuiescenceMethod.Invoke(renderer, null)!;
            await quiescenceTask;

            var module = await _moduleLoader;

            if (!_disposed)
            {
                await module.InvokeVoidAsync("init", overlay, MaxRetries, RetryIntervalMilliseconds);
                timer = new Timer(state =>
                {
                    showCheckInternet = true;
                    InvokeAsync(StateHasChanged);
                }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
            }
        }
    }

    public void Dispose()
    {
        _disposed = true;
        timer?.Dispose();
    }
}
